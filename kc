#!/usr/bin/env python
'''
    Run './kc' for help!
'''
import sys
import os
import json
import subprocess
import struct

def error(msg) :
    print "ERROR: {}".format(msg)
    sys.exit(10)

def has_config() :
    return os.path.isfile('.config') 

def load_config() :
    if has_config :
        with open('.config', 'r') as f :
            jsn = json.loads(f.read())
        return jsn
    else :
        error("No .config file, run './kc config'!")
        return None

def check_tool(tool, arg) :
    try :
        subprocess.check_output([tool, arg])
        print "'{}' found".format(tool)
        return True
    except OSError:
        return False

def do_config() :
    # where is sdcc, z80asm and mess?
    sdcc = os.path.expanduser(raw_input("How to call 'sdcc': "))
    if not check_tool(sdcc, '--version') :
        error('{} not found!'.format(sdcc))
    makebin = os.path.expanduser(raw_input("How to call 'makebin': "))
    if not check_tool(makebin, '-help') :
        error('{} makebin not found!'.format(makebin))
    mess = os.path.expanduser(raw_input("How to call 'mess': "))
    if not check_tool(mess, '-help') :
        error('{} not found!'.format(mess))
    z80asm = os.path.expanduser(raw_input("How to call 'z80asm': "))
    if not check_tool(z80asm, '-help') :
        error('{} not found!'.format(z80asm))
    config = { 
        'sdcc': sdcc, 
        'mess': mess, 
        'z80asm': z80asm,
        'makebin': makebin 
    }
    with open('.config', 'w') as f :
        f.write(json.dumps(config))
    print '.config written'

def get_tool_path(tool) :
    if not has_config() :
        do_config()
    cfg = load_config()
    if cfg :
        return cfg[tool]

def run_mess(system, name) :
    # run mess with a KCC file
    cmd = [get_tool_path('mess'), system, 
           '-rompath', 'bios', 
           '-window', '-resolution', '640x512', '-nokeepaspect',
           '-skip_gameinfo',
           '-quik', 'bin/{}.kcc'.format(name)]
    subprocess.call(cmd)

def run_asm(src, dst) :
    # assemble a source file with z80asm
    cmd = [get_tool_path('z80asm'), src, '--verbose', '-o', 'bin/{}.bin'.format(dst)]
    return 0 == subprocess.call(cmd)

def run_sdcc(src) :
    cmd = [get_tool_path('sdcc'), src, '--verbose',
           '-mz80', '--std-sdcc99', '--no-std-crt0',
           '--disable-warning', '218',
           '--nostdinc', '--nostdlib',
           '--opt-code-size',
           '--code-loc', '0x300',
           '--data-loc', '0x200',
           '-o', 'bin/']
    return 0 == subprocess.call(cmd)

def run_makebin(name) :
    src = 'bin/{}.ihx'.format(name)
    dst = 'bin/{}.bin'.format(name)
    cmd = [get_tool_path('makebin'), '-p', src, dst]
    return 0 == subprocess.call(cmd)

def pack_kcc_header(name, start, end) :
    '''
    KCC file format header:
        struct kcc_header
        {
            UINT8   name[10];
            UINT8   reserved[6];
            UINT8   number_addresses;
            UINT8   load_address_l;
            UINT8   load_address_h;
            UINT8   end_address_l;
            UINT8   end_address_h;
            UINT8   execution_address_l;
            UINT8   execution_address_h;
            UINT8   pad[128-2-2-2-1-16];
        };
    '''
    hdr = struct.pack('10s6x7B105x', 
            name, 
            2,    # number_addresses
            start & 0xFF, (start >> 8) & 0xFF,  # load_address_l, load_address_h
            end & 0xFF, (end >> 8) & 0xFF,      # end_address_l, end_address_h
            0, 0) # execution address (not set)
    if len(hdr) != 128 :
        error('ALIGNMENT ERROR')
    return hdr

def print_hex(s) :
    print ':'.join('{:02x}'.format(ord(c)) for c in s)    

def make_test_kcc() :
    # a little KC85/3 program which prints "HELLO WORLD"
    code = ('\x7F\x7FHELLO\x01'
            '\xCD\x03\xF0'
            '\x23'
            'HELLO WORLD\x0D\x0A\x00'
            '\xC9')
    start = 0x200
    end = start + len(code)
    kcc = pack_kcc_header('HELLO', start, end) + code
    return kcc

def do_test(system) :
    kcc = make_test_kcc()
    with open('bin/test.kcc', 'wb') as f :
        f.write(kcc)
    run_mess(system, 'test')

def do_make(src) :
    dst, ext = os.path.splitext(src)

    # run compiler...
    if not run_sdcc(src) :
        error("Failed compiling '{}'!".format(src))
    # generate binary file from Intel hex file
    if not run_makebin(dst) :
        error("Failed makebin of '{}'!".format(src))
    # package binary into a KCC file
    with open('bin/{}.bin'.format(dst), 'rb') as binfile :
        # strip the first 0x200 bytes (data section starts
        # at 0x200, code section at 0x300)
        bin = binfile.read()[0x200:]
        start = 0x200
        end = start + len(bin)
        kcc = pack_kcc_header(dst.upper(), start, end) + bin
        with open('bin/{}.kcc'.format(dst), 'wb') as kccfile :
            kccfile.write(kcc)
        print 'wrote bin/{}.kcc'.format(dst)

def do_asm(src, dst) :
    # compile to bin/dst.bin
    if run_asm(src, dst) :
        # load assembled binary and package into KCC
        with open('bin/{}.bin'.format(dst), 'rb') as binfile :
            bin = binfile.read()
            start = 0x200
            end = start + len(bin)
            kcc = pack_kcc_header(dst.upper(), start, end) + bin
            with open('bin/{}.kcc'.format(dst), 'wb') as kccfile :
                kccfile.write(kcc)
            print 'wrote bin/{}.kcc'.format(dst)
    else :
        error('Failed to assemble {}'.format(src))

def do_run(system, name) :
    # run a compiled/assembled KCC file through mess
    run_mess(system, name)

#===============================================================================
if len(sys.argv) == 1 :
    print 'Compile C code for KC85/3 and KC85/4 home computers.\n'
    print 'kc (cmd) [args...]'
    print '\nkc config'
    print '  run once to configure for your local environment'
    print '\nkc make c-source'
    print '  compile c source into program'
    print '\nkc asm (asm-source) [prog]'
    print '  assemble asm source into program'
    print '\nkc run (prog) [system=kc85_3|kc85_4]'
    print '  run a compiled program in MESS'
    print '\nkc test [system=kc85_3|kc85_4]'
    print "  test run with a hardcoded 'HELLO WORLD' program"

else :
    cmd = sys.argv[1]
    if cmd == 'config' :
        do_config()
    elif cmd == 'make' :
        if len(sys.argv) != 3:
            error("Expected 'source' argument: kc make hello.c")
        src = sys.argv[2]
        do_make(src)
    elif cmd == 'asm' :
        src = 'out.s'
        prg = 'out'
        if len(sys.argv) == 3 :
            src = sys.argv[2]
            dst, ext = os.path.splitext(src)
        elif len(sys.argv) == 4:
            src = sys.argv[2]
            dst = sys.argv[3]
        else :
            error('Excepted (source) and optional [prog] arg: kc asm hello.s hello')
        do_asm(src, dst)
    elif cmd == 'run' :
        system = 'kc85_3'
        prg = 'out'
        if len(sys.argv) == 3 :
            prg = sys.argv[2]
        elif len(sys.argv) == 4 :
            prg = sys.argv[2]
            system = sys.argv[3]
        else :
            error('Expected (prog) and optional [system] arg: kc run hello kc85_3')
        do_run(system, prg)
    elif cmd == 'test' :
        system = 'kc85_3'
        if len(sys.argv) >= 3 :
            system = sys.argv[2]
        do_test(system)
    else :
        error('Unknown cmd: {}'.format(cmd))
